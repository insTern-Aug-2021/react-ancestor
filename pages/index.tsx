import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { CatPost } from "../types/Cats";
import { NextPage } from "next";
import { useReducer, useState } from "react";
import CatCard from "../components/CatCard";
import { Row, Col, Input } from "antd";
import { reducer } from "../reducer";
import { AppState } from "../types/AppState";
import { Select } from "antd";
import { SearchAction } from "../types/AppAction";

interface HomeProps {
  posts: CatPost[];
  authors: string[];
}

const { Option } = Select;

const Home: NextPage<HomeProps> = ({ posts, authors }) => {
  const initialState: AppState = {
    allImages: posts,
    matchedImage: posts,
  };
  const [{ matchedImage }, dispatch] = useReducer(reducer, initialState);

  const [selectedAuthors, setSelectedAuthors] = useState([]);

  const onSelectedAuthorsChange = (value: string[]) => {
    dispatch(new SearchAction(value, ""));
    setSelectedAuthors(value);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Row justify="space-around" className={styles.searchBar}>
          <Col span={6}>
            <Select
              className={styles.input}
              mode="multiple"
              placeholder="Select your authors"
              onChange={onSelectedAuthorsChange}
            >
              {authors.map((author, index) => (
                <Option value={author} key={index}>
                  {author}
                </Option>
              ))}
            </Select>
          </Col>
          <Col span={14}>
            <Input />
          </Col>
        </Row>
        <Row justify="center">
          {matchedImage.map(({ author, title, url }, index) => (
            <Col key={index}>
              <CatCard key={index} author={author} title={title} url={url} />
            </Col>
          ))}
        </Row>
      </main>
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

Home.getInitialProps = async ({
  req: {
    headers: { host },
  },
}): Promise<HomeProps> => {
  console.log(host);
  const res = await fetch(`http://${host}/api/getCats`);
  const posts = (await res.json()) as CatPost[];
  const authors = Object.keys(
    posts.reduce((acc, { author }) => ({ ...acc, [author]: 1 }), {})
  );
  return { posts, authors };
};

export default Home;
